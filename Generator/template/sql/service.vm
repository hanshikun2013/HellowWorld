package ${packageService};

import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.List;
import java.math.BigDecimal;

import org.apache.commons.beanutils.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import org.apache.commons.beanutils.ConvertUtils;
import org.apache.commons.beanutils.converters.BigDecimalConverter;
import org.apache.commons.beanutils.converters.SqlTimestampConverter;

import ${packageDao}.${sqlModel.name}Dao;
import ${packageParameter}.${sqlModel.name}Condition;
import ${packageResult}.${sqlModel.name}Record;
import ${package_model}.${sqlModel.name}JsonCondition;
import ${package_model}.${sqlModel.name}JsonRecord;


@Service("$StringUtil.toLowerCaseInitial(${sqlModel.name})Service")
public class ${sqlModel.name}Service implements ${sqlModel.name}IService {
	@Autowired
	private ${sqlModel.name}Dao $StringUtil.toLowerCaseInitial(${sqlModel.name})Dao;

	public List<${sqlModel.name}JsonRecord> selectByCondition(${sqlModel.name}JsonCondition jsonCondition) {
		${sqlModel.name}Condition condition=new ${sqlModel.name}Condition();
		try {
			BeanUtils.copyProperties(condition,jsonCondition);
		} catch (IllegalAccessException | InvocationTargetException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		ConvertUtils.register(new BigDecimalConverter(null), BigDecimal.class);
		ConvertUtils.register(new SqlTimestampConverter(null), java.sql.Timestamp.class);
		List<${sqlModel.name}Record> daoResult=${StringUtil.toLowerCaseInitial(${sqlModel.name})}Dao.selectByCondition(condition);
		List<${sqlModel.name}JsonRecord> result=new ArrayList<${sqlModel.name}JsonRecord>();
		for(${sqlModel.name}Record record:daoResult){
			${sqlModel.name}JsonRecord jsonRecord=new ${sqlModel.name}JsonRecord();
			result.add(jsonRecord);
			try {
				BeanUtils.copyProperties( jsonRecord,record);
			} catch (IllegalAccessException | InvocationTargetException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		ConvertUtils.deregister();		
		return result;
	}

}
